package com.tavisca.assignment.beveragesTest;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.tavisca.assignment.exceptions.IllegalIngredientsException;
import com.tavisca.assignment.exceptions.InvalidOrderException;

public class CRUDOpertions {
	
	 Map<String, List<String>> beveragesMap = MenuCardAndIngredites.getBeveragesMap();

	    //      This stores the price of Items
	    Map<String, Double> itemRates = MenuCardAndIngredites.getItemRates();

	    //      This stores the price of exclusions
	    Map<String, Double> ingredientRates = MenuCardAndIngredites.getIngredientRates();

	    //      get cost of each item in order and total them
	    public double getInvoiceFromOrder(String order) {
	        double cost = 0.0d;
	        List<String> orderItems = getItemsFromOrder(order.trim());
	        for (String item : orderItems) {
	            List<String> itemWithIngredients = getIngredientFromItem(item);
	            checkIfValidOrder(item);
	            cost = cost + calculateInvoice(itemWithIngredients);
	        }
	        return cost;
	    }

	    //     if ordered item not present in MENU or empty order returns false
	    private void checkIfValidOrder(String item) {
	        List<String> itemIngredients = getIngredientFromItem(item);

	        if (!beveragesMap.containsKey(itemIngredients.get(0)))
	            throw new InvalidOrderException("Invalid item ordered -> " + item + " .Order again with valid menu item..!!");

	        List<String> allIngredients = beveragesMap.get(itemIngredients.get(0)); // Beverage name is always at index 0

	        List<String> ingredients = itemIngredients.subList(1, itemIngredients.size());
	        boolean validIngredients = ingredients.stream().allMatch(t -> allIngredients.stream().anyMatch(t::contains));
	        
	        if (!validIngredients)
	            throw new IllegalIngredientsException("Invalid ingredient in order.Please check and order again..!!");

	    }

	    //     get Item and exclusion prices from DataLoader and return cost for each item in order
	    private Double calculateInvoice(List<String> itemWithIngredients) {
	        Double itemValue = itemRates.get(itemWithIngredients.get(0));
	        Double ingredientsValue = 0.0d;
	        if (itemWithIngredients.size() > 1)
	            for (int i = 1; i < itemWithIngredients.size(); i++) {
	                ingredientsValue = ingredientsValue + ingredientRates.get(itemWithIngredients.get(i));
	            }
	        return itemValue - ingredientsValue;
	    }

	    //     this returns a List which has order with exclusions at each index, all in Lower cases
//	     Chai, -milk, -water, Mojito, Coffee, -milk, -sugar will have
//	     Chai, -milk, -water
//	     Mojito
//	     Coffee, -milk, -sugar
	    private List<String> getItemsFromOrder(String order1) {
	        return Arrays.stream(order1.split("(?!,\\s*-),")).map(String::trim).map(String::toLowerCase).collect(Collectors.toList());
	    }

	    //     Similar to getItemsFromOrder(), but this replaces '-' from the order
	    private List<String> getIngredientFromItem(String item) {
	        return Arrays.stream(item.split(",")).map(s -> s.replace("-", "")).map(String::trim).collect(Collectors.toList());
	    }

}
